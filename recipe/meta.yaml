{% set name = "pyfai" %}
{% set version = "2025.1.0" %}
{% set sha256 = "396cb36876d4a9cd989b670b73868001c2b5070f7f3be2c496397605f6f7d181" %}

package:
  name: {{ name|lower }}-base
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  skip: true  # [python_impl == "pypy"]
  entry_points:
    - check_calib = pyFAI.app.check_calib:main
    - detector2nexus = pyFAI.app.detector2nexus:main
    - diff_map = pyFAI.app.diff_map:main
    - diff_tomo = pyFAI.app.diff_tomo:main
    - eiger-mask = pyFAI.app.eiger_mask:main
    - MX-calibrate = pyFAI.app.mx_calibrate:main
    - pyFAI-average = pyFAI.app.average:main
    - pyFAI-benchmark = pyFAI.app.benchmark:main
    - pyFAI-calib = pyFAI.app.calib:main
    - pyFAI-recalib = pyFAI.app.recalib:main
    - pyFAI-saxs = pyFAI.app.saxs:main
    - pyFAI-waxs = pyFAI.app.waxs:main
    - sparsify-Bragg = pyFAI.app.sparsify:main
    - peakfinder = pyFAI.app.peakfinder:main
    - pyFAI-calib2 = pyFAI.app.calib2:main
    - pyFAI-drawmask = pyFAI.app.drawmask:main
    - pyFAI-diffmap = pyFAI.app.diff_map:main
    - pyFAI-integrate = pyFAI.app.integrate:main


requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - ninja                                  # [build_platform != target_platform]
    - pkg-config                             # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}

  host:
    - python
    - python-build
    - pip
    - meson-python >=0.11
    - meson >=0.64
    - ninja
    - wheel
    - numpy
    - cython >=0.29.31
    - pyproject-metadata >=0.5.0
    - tomli >=1.0.0

  run:
    - python
    - h5py
    - fabio
    - silx-base >=1.1
    - numexpr
    - scipy
    - matplotlib-base


test:
  imports:
    - pyFAI
    - pyFAI.test
    - pyFAI.third_party
  commands:
    - pip check
  requires:
    - pip


outputs:
  - name: pyfai-base

  - name: pyfai
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage('pyfai-base', max_pin="x.x.x.x") }}
        - matplotlib
        - silx >=1.1
        - hdf5plugin

about:
  home: https://github.com/silx-kit/pyFAI/
  license: MIT
  license_family: MIT
  license_file: copyright
  summary: Python implementation of fast azimuthal integration

  description: |
    pyFAI is an azimuthal integration library that tries to be fast (as fast
    as C and even more using OpenCL and GPU). It is based on histogramming of
    the 2theta/Q positions of each (center of) pixel weighted by the intensity
    of each pixel, but parallel version uses a SparseMatrix-DenseVector
    multiplication. Neighboring output bins get also a contribution of pixels
    next to the border thanks to pixel splitting. Finally pyFAI provides also
    tools to calibrate the experimental setup using Debye-Scherrer rings of a
    reference compound.
  doc_url: http://www.silx.org/doc/pyFAI/latest/
  dev_url: https://github.com/silx-kit/pyFAI/

extra:
  recipe-maintainers:
    - CJ-Wright
    - tacaswell
    - chiahaoliu
    - tschoonj
    - kif
    - t20100
